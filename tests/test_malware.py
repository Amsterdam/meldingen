from unittest.mock import AsyncMock, Mock

import pytest
from azure.storage.blob.aio import BlobClient, ContainerClient
from meldingen_core.malware import MalwareException, MalwareFoundException

from meldingen.malware import (
    AzureDefenderForStorageMalwareScanner,
    ScanResultTagNotFoundException,
    UnsupportedScanResultException,
)


@pytest.mark.anyio
async def test_azure_defender_for_storage_malware_scanner_successful_result() -> None:
    blob_client = AsyncMock(BlobClient)
    blob_client.get_blob_tags.return_value = {"Malware Scanning scan result": "No threats found"}

    container_client = Mock(ContainerClient)
    container_client.get_blob_client.return_value = blob_client

    scan = AzureDefenderForStorageMalwareScanner(container_client)

    await scan("path/to/file")


@pytest.mark.anyio
async def test_azure_defender_for_storage_malware_scanner_request_fails() -> None:
    blob_client = AsyncMock(BlobClient)
    blob_client.get_blob_tags.side_effect = Exception("Something went terribly wrong")

    container_client = Mock(ContainerClient)
    container_client.get_blob_client.return_value = blob_client

    scan = AzureDefenderForStorageMalwareScanner(container_client)

    with pytest.raises(MalwareException):
        await scan("path/to/file")


@pytest.mark.anyio
async def test_azure_defender_for_storage_malware_scanner_cannot_find_tag() -> None:
    blob_client = AsyncMock(BlobClient)
    blob_client.get_blob_tags.return_value = {}

    container_client = Mock(ContainerClient)
    container_client.get_blob_client.return_value = blob_client

    scan = AzureDefenderForStorageMalwareScanner(container_client, 2, 0.001)

    with pytest.raises(ScanResultTagNotFoundException):
        await scan("path/to/file")


@pytest.mark.anyio
async def test_azure_defender_for_storage_malware_scanner_malware_found() -> None:
    blob_client = AsyncMock(BlobClient)
    blob_client.get_blob_tags.return_value = {"Malware Scanning scan result": "Malicious"}

    container_client = Mock(ContainerClient)
    container_client.get_blob_client.return_value = blob_client

    scan = AzureDefenderForStorageMalwareScanner(container_client)

    with pytest.raises(MalwareFoundException):
        await scan("path/to/file")


@pytest.mark.anyio
async def test_azure_defender_for_storage_malware_scanner_unsupported_tag_value() -> None:
    blob_client = AsyncMock(BlobClient)
    blob_client.get_blob_tags.return_value = {"Malware Scanning scan result": "Unsupported value"}

    container_client = Mock(ContainerClient)
    container_client.get_blob_client.return_value = blob_client

    scan = AzureDefenderForStorageMalwareScanner(container_client)

    with pytest.raises(UnsupportedScanResultException):
        await scan("path/to/file")
