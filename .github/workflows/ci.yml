name: Build
on: [pull_request]
permissions:
  contents: read
  packages: write
env:
  REGISTRY: ${{ vars.REGISTRY }}
  REPOSITORY: ${{ vars.REPOSITORY }}
  VERSION: ${{ github.run_id }}

jobs:
  build_container_images:
    runs-on:
      group: large-runners
    steps:
      # https://github.com/actions/checkout
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create the .env file
        run: cp .env.example .env

      - name: Build containers
        run: docker buildx bake --file docker-compose.yml --file docker-compose.cache.json

      - name: Push images
        run: docker push ${REGISTRY}/${REPOSITORY}:${VERSION}

  run_tests:
    needs: build_container_images
    runs-on:
      group: large-runners
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create the .env file
        run: |
          cp .env.example .env
          echo "CI=true" >> .env

      - name: Pull images
        run: |
          docker pull ${REGISTRY}/${REPOSITORY}:${VERSION}
          docker pull postgis/postgis:16-3.4-alpine
          docker pull mcr.microsoft.com/azure-storage/azurite:latest
          docker pull axllent/mailpit:latest
          docker pull amsterdam/amsterdam-mail-service:latest
          docker pull darthsim/imgproxy

      - name: Run alembic tests
        run: |
          docker network create meldingen_network
          docker run -d --rm -p "54321:5432" -v "$(pwd)/docker/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d" -e POSTGRES_USER=meldingen -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=meldingen --network meldingen_network --network-alias database postgis/postgis:16-3.4-alpine
          docker run --rm -v $(pwd):/opt/meldingen --network meldingen_network --env-file .env ${REGISTRY}/${REPOSITORY}:${VERSION} pytest --test-alembic -m alembic

      - name: Run tests
        run: |
          docker run -d --rm -p "10000:10000" --network meldingen_network --network-alias azurite mcr.microsoft.com/azure-storage/azurite:latest azurite-blob --blobHost 0.0.0.0 --blobPort 10000
          docker run -d --rm -p "8081:8080" -e IMGPROXY_KEY=000000 -e IMGPROXY_SALT=111111 -e IMGPROXY_USE_ABS=true -e IMGPROXY_ABS_NAME=devstoreaccount1 -e IMGPROXY_ABS_KEY=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw== -e IMGPROXY_ABS_ENDPOINT=http://azurite:10000/devstoreaccount1 -e IMGPROXY_BASE_URL=abs://meldingencontainer/ --network meldingen_network --network-alias imgproxy darthsim/imgproxy 
          docker run -d --rm -p "8025:8025" -p "1025:1025" --network meldingen_network --network-alias mailpit axllent/mailpit:latest
          docker run -d --rm -p "8003:8003" -e PORT=8003 -e SMTP_HOST=mailpit -e SMTP_PORT=1025 --network meldingen_network --network-alias mail-service amsterdam/amsterdam-mail-service:latest
          docker run --rm -v $(pwd):/opt/meldingen --network meldingen_network --env-file .env ${REGISTRY}/${REPOSITORY}:${VERSION} pytest --cov --cov-fail-under=95 -n auto -v

  Black:
    needs: build_container_images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create the .env file
        run: cp .env.example .env

      - name: Pull images
        run: docker pull ${REGISTRY}/${REPOSITORY}:${VERSION}

      - name: black
        run:  docker run -v $(pwd):/opt/meldingen ${REGISTRY}/${REPOSITORY}:${VERSION} black . --check

  iSort:
    needs: build_container_images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create the .env file
        run: cp .env.example .env

      - name: Pull images
        run: docker pull ${REGISTRY}/${REPOSITORY}:${VERSION}

      - name: isort
        run: docker run -v $(pwd):/opt/meldingen ${REGISTRY}/${REPOSITORY}:${VERSION} isort . --check

  MyPy:
    needs: build_container_images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create the .env file
        run: cp .env.example .env

      - name: Pull images
        run: docker pull ${REGISTRY}/${REPOSITORY}:${VERSION}

      - name: mypy
        run: docker run -v $(pwd):/opt/meldingen ${REGISTRY}/${REPOSITORY}:${VERSION} bash -c "mypy --strict . | mypy-baseline filter"
