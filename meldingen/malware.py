import asyncio
import logging
from typing import Final

from azure.storage.blob.aio import ContainerClient
from meldingen_core.malware import BaseMalwareScanner, MalwareException, MalwareFoundException

logger = logging.getLogger(__name__)


class ScanResultTagNotFoundException(MalwareException): ...


class UnsupportedScanResultException(MalwareException): ...


class AzureDefenderForStorageMalwareScanner(BaseMalwareScanner):
    """When "Defender for Storage" is enabled with the "on-upload" scanning feature
    it will add a tag with the malware scanning results. Since the scanning is
    "near realtime" we don't know exactly how long we need to wait for the tag
    to become available to us. So we retry getting the tags with some sleepy time in
    between."""

    TAG_KEY: Final[str] = "Malware Scanning scan result"
    SAFE_TAG_VALUE: Final[str] = "No threats found"
    UNSAFE_TAG_VALUE: Final[str] = "Malicious"

    _container_client: ContainerClient
    _tries: int
    _sleep_time: float

    def __init__(self, container_client: ContainerClient, tries: int = 5, sleep_time: float = 1.0):
        self._container_client = container_client
        self._tries = tries
        self._sleep_time = sleep_time

    async def __call__(self, file_path: str) -> None:
        for i in range(self._tries):
            try:
                logger.info(f"Scanning {file_path} for malware")
                await self._check_tags(file_path)
            except ScanResultTagNotFoundException as exception:
                if i == self._tries - 1:
                    raise exception

                logger.warning(f"Tag {self.TAG_KEY} not found, trying again in {self._sleep_time} seconds")
                await asyncio.sleep(self._sleep_time)
                continue

            break

    async def _check_tags(self, file_path: str) -> None:
        blob_client = self._container_client.get_blob_client(file_path)

        async with blob_client:
            try:
                tags = await blob_client.get_blob_tags()
            except Exception as e:
                raise MalwareException() from e

        scan_result = tags.get(self.TAG_KEY)
        if scan_result is None:
            raise ScanResultTagNotFoundException()

        if scan_result == self.UNSAFE_TAG_VALUE:
            raise MalwareFoundException()
        elif scan_result != self.SAFE_TAG_VALUE:
            raise UnsupportedScanResultException()
